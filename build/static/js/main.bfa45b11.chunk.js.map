{"version":3,"sources":["helpers/utilities.ts","helpers/api.ts","features/walletConnectSlice.ts","features/applicationSlice.ts","components/SiteHeader/index.tsx","components/Icon.tsx","components/ASAIcon.tsx","assets/algo.svg","components/AssetRow.tsx","components/AccountAssets.tsx","components/LoadingIcon.tsx","components/SiteBody/index.tsx","App.tsx","reportWebVitals.js","store/index.ts","index.tsx"],"names":["ellipseAddress","address","width","slice","formatBigNumWithDecimals","num","decimals","singleUnit","BigInt","repeat","fractionalUnits","toString","padStart","ChainType","mainNetClient","algosdk","Algodv2","testNetClient","clientForChain","chain","MainNet","TestNet","Error","apiGetAccountAssets","a","client","accountInformation","setIntDecoding","IntDecoding","BIGINT","do","accountInfo","algoBalance","amount","assetsFromRes","assets","map","id","creator","frozen","Number","sort","b","Promise","all","asset","getAssetByID","params","name","unitName","url","unshift","initialState","accounts","connected","connector","fetching","getAccountAssets","createAsyncThunk","accountData","response","walletConnectSlice","createSlice","reducers","setFetching","state","action","console","log","payload","switchChain","reset","walletConnectInit","WalletConnect","bridge","qrcodeModal","QRCodeModal","setConnected","onConnect","onSessionUpdate","setAccountAssets","killSession","extraReducers","builder","addCase","fulfilled","selectFetching","walletConnect","selectChain","selectConnected","selectConnector","selectAssets","selectAddress","actions","applicationSlice","isModalOpen","setIsModalOpen","selectIsModalOpen","application","SiteHeader","loading","useSelector","nativeCurrency","find","dispatch","useDispatch","useEffect","window","localStorage","getItem","subscribeToEvents","createSession","length","on","error","className","Select","defaultValue","onChange","event","target","value","Button","onClick","Icon","props","src","fallback","onError","defaultProps","size","ASAIcon","assetID","AssetRow","nativeCurrencyIcon","algo","AccountAssets","tokens","filter","token","LoadingIcon","SiteBody","App","href","Dialog","isShown","title","hasFooter","onCloseComplete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","walletConnectReducer","applicationReducer","preloadedState","middleware","getDefaultMiddleware","serializableCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfa45b11.chunk.js","sourcesContent":["export function capitalize(string: string): string {\r\n    return string\r\n      .split(\" \")\r\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n      .join(\" \");\r\n  }\r\n  \r\n  export function ellipseText(text = \"\", maxLength = 9999): string {\r\n    if (text.length <= maxLength) {\r\n      return text;\r\n    }\r\n    const _maxLength = maxLength - 3;\r\n    let ellipse = false;\r\n    let currentLength = 0;\r\n    const result =\r\n      text\r\n        .split(\" \")\r\n        .filter(word => {\r\n          currentLength += word.length;\r\n          if (ellipse || currentLength >= _maxLength) {\r\n            ellipse = true;\r\n            return false;\r\n          } else {\r\n            return true;\r\n          }\r\n        })\r\n        .join(\" \") + \"...\";\r\n    return result;\r\n  }\r\n  \r\n  export function ellipseAddress(address = \"\", width = 6): string {\r\n    return `${address.slice(0, width)}...${address.slice(-width)}`;\r\n  }\r\n  \r\n  export function padLeft(n: string, width: number, z?: string): string {\r\n    z = z || \"0\";\r\n    n = n + \"\";\r\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n  }\r\n  \r\n  export function sanitizeHex(hex: string): string {\r\n    hex = hex.substring(0, 2) === \"0x\" ? hex.substring(2) : hex;\r\n    if (hex === \"\") {\r\n      return \"\";\r\n    }\r\n    hex = hex.length % 2 !== 0 ? \"0\" + hex : hex;\r\n    return \"0x\" + hex;\r\n  }\r\n  \r\n  export function removeHexPrefix(hex: string): string {\r\n    return hex.toLowerCase().replace(\"0x\", \"\");\r\n  }\r\n  \r\n  export function getDataString(func: string, arrVals: any[]): string {\r\n    let val = \"\";\r\n    for (let i = 0; i < arrVals.length; i++) {\r\n      val += padLeft(arrVals[i], 64);\r\n    }\r\n    const data = func + val;\r\n    return data;\r\n  }\r\n  \r\n  export function isMobile(): boolean {\r\n    let mobile = false;\r\n  \r\n    function hasTouchEvent(): boolean {\r\n      try {\r\n        document.createEvent(\"TouchEvent\");\r\n        return true;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    }\r\n  \r\n    function hasMobileUserAgent(): boolean {\r\n      if (\r\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\r\n          navigator.userAgent,\r\n        ) ||\r\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\r\n          navigator.userAgent.substr(0, 4),\r\n        )\r\n      ) {\r\n        return true;\r\n      } else if (hasTouchEvent()) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \r\n    mobile = hasMobileUserAgent();\r\n  \r\n    return mobile;\r\n  }\r\n  \r\n  export function formatBigNumWithDecimals(num: bigint, decimals: number): string {\r\n    const singleUnit = BigInt(\"1\" + \"0\".repeat(decimals));\r\n    const wholeUnits = num / singleUnit;\r\n    const fractionalUnits = num % singleUnit;\r\n  \r\n    return wholeUnits.toString() + \".\" + fractionalUnits.toString().padStart(decimals, \"0\");\r\n  }\r\n  ","import algosdk from \"algosdk\";\r\nimport { IAssetData } from \"./types\";\r\n\r\nexport enum ChainType {\r\n  MainNet = \"mainnet\",\r\n  TestNet = \"testnet\",\r\n}\r\n\r\nconst mainNetClient = new algosdk.Algodv2(\"\", \"https://algoexplorerapi.io\", \"\");\r\nconst testNetClient = new algosdk.Algodv2(\"\", \"https://testnet.algoexplorerapi.io\", \"\");\r\n\r\nfunction clientForChain(chain: ChainType): algosdk.Algodv2 {\r\n  switch (chain) {\r\n    case ChainType.MainNet:\r\n      return mainNetClient;\r\n    case ChainType.TestNet:\r\n      return testNetClient;\r\n    default:\r\n      throw new Error(`Unknown chain type: ${chain}`);\r\n  }\r\n}\r\n\r\nexport async function apiGetAccountAssets(\r\n  chain: ChainType,\r\n  address: string,\r\n): Promise<IAssetData[]> {\r\n  const client = clientForChain(chain);\r\n\r\n  const accountInfo = await client\r\n    .accountInformation(address)\r\n    .setIntDecoding(algosdk.IntDecoding.BIGINT)\r\n    .do();\r\n\r\n  const algoBalance = accountInfo.amount as bigint;\r\n  const assetsFromRes: Array<{\r\n    \"asset-id\": bigint;\r\n    amount: bigint;\r\n    creator: string;\r\n    frozen: boolean;\r\n  }> = accountInfo.assets;\r\n\r\n  const assets: IAssetData[] = assetsFromRes.map(({ \"asset-id\": id, amount, creator, frozen }) => ({\r\n    id: Number(id),\r\n    amount,\r\n    creator,\r\n    frozen,\r\n    decimals: 0,\r\n  }));\r\n\r\n  assets.sort((a, b) => a.id - b.id);\r\n\r\n  await Promise.all(\r\n    assets.map(async asset => {\r\n      const { params } = await client.getAssetByID(asset.id).do();\r\n      asset.name = params.name;\r\n      asset.unitName = params[\"unit-name\"];\r\n      asset.url = params.url;\r\n      asset.decimals = params.decimals;\r\n    }),\r\n  );\r\n\r\n  assets.unshift({\r\n    id: 0,\r\n    amount: algoBalance,\r\n    creator: \"\",\r\n    frozen: false,\r\n    decimals: 6,\r\n    name: \"Algo\",\r\n    unitName: \"Algo\",\r\n  });\r\n\r\n  return assets;\r\n}\r\n\r\nexport async function apiGetTxnParams(chain: ChainType): Promise<algosdk.SuggestedParams> {\r\n  const params = await clientForChain(chain)\r\n    .getTransactionParams()\r\n    .do();\r\n  return params;\r\n}\r\n\r\nexport async function apiSubmitTransactions(\r\n  chain: ChainType,\r\n  stxns: Uint8Array[],\r\n): Promise<number> {\r\n  const { txId } = await clientForChain(chain)\r\n    .sendRawTransaction(stxns)\r\n    .do();\r\n  return await waitForTransaction(chain, txId);\r\n}\r\n\r\nasync function waitForTransaction(chain: ChainType, txId: string): Promise<number> {\r\n  const client = clientForChain(chain);\r\n\r\n  let lastStatus = await client.status().do();\r\n  let lastRound = lastStatus[\"last-round\"];\r\n  while (true) {\r\n    const status = await client.pendingTransactionInformation(txId).do();\r\n    if (status[\"pool-error\"]) {\r\n      throw new Error(`Transaction Pool Error: ${status[\"pool-error\"]}`);\r\n    }\r\n    if (status[\"confirmed-round\"]) {\r\n      return status[\"confirmed-round\"];\r\n    }\r\n    lastStatus = await client.statusAfterBlock(lastRound + 1).do();\r\n    lastRound = lastStatus[\"last-round\"];\r\n  }\r\n}\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport WalletConnect from \"@walletconnect/client\";\r\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\r\nimport { apiGetAccountAssets, ChainType } from \"../helpers/api\";\r\nimport { IAssetData } from \"../helpers/types\";\r\n\r\ninterface WalletConnectState {\r\n  chain: ChainType,\r\n  accounts: string[],\r\n  address: string,\r\n  assets: IAssetData[],\r\n  connected: boolean,\r\n  connector: WalletConnect | null,\r\n  fetching: boolean,\r\n}\r\n\r\nconst initialState = {\r\n  accounts: [],\r\n  address: \"\",\r\n  assets: [],\r\n  connected: false,\r\n  connector: null,\r\n  chain: ChainType.TestNet,\r\n  fetching: false,\r\n} as WalletConnectState;\r\n\r\nexport const getAccountAssets = createAsyncThunk(\"walletConnect/getAccountAssets\", async (accountData: {chain: ChainType, address: string}) => {\r\n  const { chain, address } = accountData;\r\n  const response = apiGetAccountAssets(chain, address)\r\n  return response;\r\n})\r\n\r\nexport const walletConnectSlice = createSlice({\r\n    name: 'walletConnect',\r\n    initialState,\r\n    reducers: {\r\n      setFetching(state, action) {\r\n        console.log(\"setFetching: \", action.payload)\r\n        state.fetching = action.payload;\r\n      },\r\n      switchChain(state, action) {\r\n        console.log(\"switchChain chain: \", action.payload)\r\n        state.chain = action.payload;\r\n      },\r\n      reset: state => {\r\n        state.accounts = [];\r\n        state.address = \"\";\r\n        state.assets = [];\r\n        state.connected = false;\r\n        state.connector = null;\r\n        console.log(\"reset state\", state)\r\n      },\r\n      walletConnectInit: state => {\r\n        // Create a connector\r\n        state.connector = new WalletConnect({\r\n          bridge: \"https://bridge.walletconnect.org\",\r\n          qrcodeModal: QRCodeModal,\r\n        });\r\n      },\r\n      setConnected: (state, action) => {\r\n        state.connected = action.payload;\r\n      },\r\n      onConnect: (state, action) =>  {\r\n        const { accounts } = action.payload.params[0];\r\n        state.accounts = accounts;\r\n        state.address = accounts[0];\r\n      },\r\n      onSessionUpdate: (state, action) => {\r\n        state.accounts = action.payload;\r\n        state.address = action.payload[0];\r\n      },\r\n      setAccountAssets: (state, action) => {\r\n        state.assets = action.payload;\r\n      },\r\n      killSession: state => {\r\n        if (state.connected) {\r\n          (state.connector as WalletConnect).killSession();\r\n        }\r\n      }\r\n    },\r\n    extraReducers(builder) {\r\n      builder.addCase(getAccountAssets.fulfilled, (state, action) => {\r\n        state.assets = action.payload;\r\n      })\r\n    }\r\n});\r\n\r\nexport const selectFetching = (state: any) => state.walletConnect && state.walletConnect.fetching;\r\nexport const selectChain = (state: any) => state.walletConnect && state.walletConnect.chain;\r\nexport const selectConnected = (state: any) => state.walletConnect && state.walletConnect.connected;\r\nexport const selectConnector = (state: any) => state.walletConnect && state.walletConnect.connector;\r\nexport const selectAssets = (state: any) => state.walletConnect && state.walletConnect.assets;\r\nexport const selectAddress = (state: any) => state.walletConnect && state.walletConnect.address;\r\n\r\nexport const {\r\n  setFetching,\r\n  switchChain,\r\n  reset,\r\n  walletConnectInit,\r\n  setConnected,\r\n  onConnect,\r\n  onSessionUpdate,\r\n  killSession\r\n} = walletConnectSlice.actions;\r\n\r\nexport default walletConnectSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  isModalOpen: false,\r\n};\r\n\r\nexport const applicationSlice = createSlice({\r\n  name: 'application',\r\n  initialState,\r\n  reducers: {\r\n    setIsModalOpen: (state, action) => {\r\n      state.isModalOpen = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const selectIsModalOpen = (state: any) => state.application && state.application.isModalOpen;\r\n\r\nexport const {\r\n  setIsModalOpen,\r\n} = applicationSlice.actions;\r\n\r\nexport default applicationSlice.reducer;","import React, { useEffect } from 'react';\r\n\r\nimport { Button, Select } from 'evergreen-ui';\r\nimport { ellipseAddress, formatBigNumWithDecimals } from '../../helpers/utilities';\r\nimport { IAssetData } from '../../helpers/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { reset, setConnected, onConnect, onSessionUpdate, killSession, selectConnector, selectAssets, selectAddress, getAccountAssets, selectChain, selectConnected, walletConnectInit, switchChain, setFetching, selectFetching } from '../../features/walletConnectSlice';\r\nimport WalletConnect from '@walletconnect/client';\r\nimport { setIsModalOpen } from '../../features/applicationSlice';\r\nimport { ChainType } from '../../helpers/api';\r\n\r\nconst SiteHeader: React.FC = () => {\r\n  const loading = useSelector(selectFetching);\r\n  const connector = useSelector(selectConnector);\r\n  const connected = useSelector(selectConnected);\r\n  const assets = useSelector(selectAssets);\r\n  const address = useSelector(selectAddress);\r\n  const chain = useSelector(selectChain);\r\n  const nativeCurrency = assets && assets.find((asset: IAssetData) => asset && asset.id === 0) || {\r\n    id: 0,\r\n    amount: BigInt(0),\r\n    creator: \"\",\r\n    frozen: false,\r\n    decimals: 6,\r\n    name: \"Algo\",\r\n    unitName: \"Algo\",\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (window.localStorage.getItem(\"walletconnect\") != null) {\r\n      dispatch(walletConnectInit());\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (connected) {\r\n      dispatch(setIsModalOpen(false));\r\n    }\r\n  }, [connected]);\r\n\r\n  useEffect(() => {\r\n    // Check if connection is already established\r\n    if (connector) {\r\n      subscribeToEvents(connector);\r\n      dispatch(setConnected(true));\r\n      if (!connector.connected) {\r\n        connector.createSession();\r\n      }\r\n      const { accounts } = connector;\r\n      dispatch(onSessionUpdate(accounts));   \r\n    }\r\n  }, [connector]);\r\n\r\n  useEffect(() => {\r\n    // Check if connection is already established\r\n    if (connector && address && address.length > 0) {\r\n      console.log(\"chain: \", chain)\r\n      dispatch(getAccountAssets({chain, address}));\r\n      dispatch(setFetching(true));\r\n    }\r\n  }, [address, chain]);\r\n\r\n  useEffect(() => {\r\n    dispatch(setFetching(false));\r\n  }, [assets]);\r\n\r\n  const subscribeToEvents = (connector: WalletConnect) => {\r\n    console.log(\"%cin subscribeToEvents\", \"background: yellow\")\r\n    if (!connector) {\r\n      return;\r\n    }\r\n    // Subscribe to connection events\r\n    connector.on(\"connect\", (error, payload) => {\r\n      console.log(\"%cOn connect\", \"background: yellow\");\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      dispatch(onConnect(payload));\r\n    });\r\n    \r\n    connector.on(\"session_update\", (error, payload) => {\r\n      console.log(\"%cOn session_update\", \"background: yellow\");\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      const { accounts } = payload.params[0];\r\n      dispatch(onSessionUpdate(accounts));\r\n    });\r\n    \r\n    connector.on(\"disconnect\", (error, payload) => {\r\n      console.log(\"%cOn disconnect\", \"background: yellow\");\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      dispatch(reset());\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"site-layout-background site-header\">\r\n      <div className=\"site-header-inner\">\r\n        <div>\r\n          <span>Connected to </span>\r\n          <Select\r\n            defaultValue={ChainType.TestNet}\r\n            onChange={event => dispatch(switchChain((event.target as HTMLSelectElement).value))}\r\n            >\r\n            <option value={ChainType.TestNet}>\r\n              Testnet\r\n            </option>\r\n            <option value={ChainType.MainNet}>\r\n              Mainnet\r\n            </option>\r\n          </Select>\r\n        </div>\r\n        {!address ?\r\n          <Button onClick={() => dispatch(setIsModalOpen(true))}>\r\n            {\"Connect Wallet\"}\r\n          </Button>\r\n        : <div className=\"header-address-info\">\r\n            {loading ? null : <span>\r\n              {formatBigNumWithDecimals(nativeCurrency.amount, nativeCurrency.decimals)} {nativeCurrency.unitName || \"units\"}\r\n            </span>}\r\n            <span className=\"header-account\">{ellipseAddress(address)}</span>\r\n            <Button\r\n              className=\"disconnect-button\"\r\n              onClick={() => dispatch(killSession())}\r\n            >\r\n              {\"Disconnect\"}\r\n            </Button>\r\n        </div>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default SiteHeader;","import * as PropTypes from \"prop-types\";\r\n\r\nconst Icon = (props: any) => {\r\n  const { src, fallback } = props;\r\n  return (\r\n    <img\r\n      {...props}\r\n      src={src}\r\n      className=\"icon\"\r\n      onError={(event: any) => {\r\n        if (fallback) {\r\n          event.target.src = fallback;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nIcon.propTypes = {\r\n  src: PropTypes.string,\r\n  fallback: PropTypes.string,\r\n  size: PropTypes.number,\r\n};\r\n\r\nIcon.defaultProps = {\r\n  src: null,\r\n  fallback: \"\",\r\n  size: 20,\r\n};\r\n\r\nexport default Icon;\r\n","import * as PropTypes from \"prop-types\";\r\nimport Icon from \"./Icon\";\r\n\r\nconst ASAIcon = (props: { assetID: number }) => {\r\n  const src = `https://algoexplorer.io/images/assets/big/light/${props.assetID}.png`;\r\n  return <Icon src={src} />;\r\n};\r\n\r\nASAIcon.propTypes = {\r\n  assetID: PropTypes.number,\r\n};\r\n\r\nASAIcon.defaultProps = {\r\n  assetID: 0,\r\n};\r\n\r\nexport default ASAIcon;\r\n","export default __webpack_public_path__ + \"static/media/algo.ecbc85e5.svg\";","import Icon from \"./Icon\";\r\nimport ASAIcon from \"./ASAIcon\";\r\nimport algo from \"../assets/algo.svg\";\r\nimport { formatBigNumWithDecimals } from \"../helpers/utilities\";\r\nimport { IAssetData } from \"../helpers/types\";\r\n\r\nconst AssetRow = (props: { asset: IAssetData }) => {\r\n  const { asset } = props;\r\n  const nativeCurrencyIcon = asset.id === 0 ? algo : null;\r\n  return (\r\n    <div className=\"asset-row\" {...props}>\r\n      <div className=\"asset-info\">\r\n        {nativeCurrencyIcon ? <Icon src={nativeCurrencyIcon} /> : <ASAIcon assetID={asset.id} />}\r\n        <span>{asset.name}</span>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          {`${formatBigNumWithDecimals(asset.amount, asset.decimals)} ${asset.unitName || \"units\"}`}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AssetRow;\r\n","import * as React from \"react\";\r\nimport AssetRow from \"./AssetRow\";\r\nimport { IAssetData } from \"../helpers/types\";\r\n\r\nconst AccountAssets = (props: { assets: IAssetData[] }) => {\r\n  const { assets } = props;\r\n\r\n  const nativeCurrency = assets.find((asset: IAssetData) => asset && asset.id === 0) || {\r\n    id: 0,\r\n    amount: BigInt(0),\r\n    creator: \"\",\r\n    frozen: false,\r\n    decimals: 6,\r\n    name: \"Algo\",\r\n    unitName: \"Algo\",\r\n  };\r\n\r\n  const tokens = assets.filter((asset: IAssetData) => asset && asset.id !== 0);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Account Balance</h2>\r\n      <AssetRow key={nativeCurrency.id} asset={nativeCurrency} />\r\n      {tokens.map(token => (\r\n        <AssetRow key={token.id} asset={token} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountAssets;\r\n","import React from 'react';\r\n\r\nconst LoadingIcon: React.FC = () => {\r\n  return (\r\n    <div className=\"loading-icon\"><span></span></div>\r\n  )\r\n}\r\n\r\nexport default LoadingIcon;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectAssets, selectFetching } from '../../features/walletConnectSlice';\r\nimport AccountAssets from '../AccountAssets';\r\nimport LoadingIcon from '../LoadingIcon';\r\n\r\nconst SiteBody: React.FC = () => {\r\n  const assets = useSelector(selectAssets);\r\n  const loading = useSelector(selectFetching);\r\n\r\n  return (\r\n    <div className=\"site-body\">\r\n      <div className=\"site-body-inner\">\r\n        {loading ? \r\n          <LoadingIcon/>\r\n          : <AccountAssets assets={assets}/>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SiteBody;","import React from 'react';\nimport { Button, Dialog } from 'evergreen-ui';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './App.css';\nimport SiteHeader from './components/SiteHeader';\nimport { walletConnectInit } from './features/walletConnectSlice';\nimport { selectIsModalOpen, setIsModalOpen } from './features/applicationSlice';\nimport SiteBody from './components/SiteBody';\n\nconst App: React.FC = () => {\n  const isModalOpen = useSelector(selectIsModalOpen);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <div className=\"site-layout\">\n        <SiteHeader/>\n        <SiteBody/>\n        <div className=\"footer\">Made with 💖 by <a href=\"https://github.com/fionnachan\" target=\"_blank\">@fionnachan</a></div>\n        <Dialog\n          isShown={isModalOpen}\n          title=\"Connect to a wallet\"\n          hasFooter={false}\n          onCloseComplete={() => dispatch(setIsModalOpen(false))}\n        >\n          <Button className=\"wallet-button\" onClick={() => dispatch(walletConnectInit())}>\n            <img className=\"wallet-icon\" src=\"/wallet/algorandwallet.svg\"/>\n            <span>Algorand Wallet</span>\n          </Button>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport walletConnectReducer from '../features/walletConnectSlice';\r\nimport applicationReducer from '../features/applicationSlice';\r\nimport { ChainType } from '../helpers/api';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    walletConnect: walletConnectReducer,\r\n    application: applicationReducer,\r\n  },\r\n  preloadedState: {\r\n  },\r\n  middleware: (getDefaultMiddleware) => \r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    })\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nconst renderApp = () => ReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (process.env.NODE_ENV !== 'production' && (module as any).hot) {\n  (module as any).hot.accept('./App', renderApp);\n}\n\nrenderApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}